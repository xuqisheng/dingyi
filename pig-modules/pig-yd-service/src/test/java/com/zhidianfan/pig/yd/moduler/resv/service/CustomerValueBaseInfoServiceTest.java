package com.zhidianfan.pig.yd.moduler.resv.service;

import com.zhidianfan.pig.yd.moduler.common.constant.QueueName;
import com.zhidianfan.pig.yd.moduler.common.dao.entity.CustomerValueList;
import com.zhidianfan.pig.yd.moduler.common.dao.entity.ResvOrder;
import com.zhidianfan.pig.yd.moduler.common.dao.entity.Vip;
import com.zhidianfan.pig.yd.moduler.common.service.IResvOrderService;
import com.zhidianfan.pig.yd.moduler.resv.dto.CustomerValueChangeFieldDTO;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.amqp.rabbit.core.RabbitTemplate;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;

import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Arrays;
import java.util.List;
import java.util.Optional;

/**
 * @author sjl
 * 2019-05-21 15:39
 */
@RunWith(SpringJUnit4ClassRunner.class)
@SpringBootTest
public class CustomerValueBaseInfoServiceTest {

    @Test
    public void test() {
        LocalDateTime now = LocalDateTime.now();
        String format = now.format(DateTimeFormatter.ofPattern("yyyyMMddHHmmss"));
        String s = format + 100;
        Long aLong = Long.valueOf(s);
        System.out.println(aLong);
    }

    @Test
    public void testMax() {
        List<Integer> integers = Arrays.asList(
                1, 2, 2, 2, 2, 2, 2, 2, 4, 4, 4, 4, 4, 5,5,5
        );

        Optional<Integer> max = integers.stream()
                .max(((o1, o2) -> o1 > o2 ? 1 : -1));
        System.out.println(max.get());


    }

    @Autowired
    private CustomerValueService customerValueService;

    @Autowired
    private CustomerValueTaskService customerValueTaskService;

    @Test
    public void addCuster() {
        customerValueTaskService.addCustomerList();
    }

    @Test
    public void getCustomerValueBaseInfoTest() {
        customerValueService.getCustomerValueBaseInfo();
    }

    @Test
    public void getCount() {
//        int customerCount = customerValueService.getCustomerCount(7165);
//        System.out.println(customerCount);
    }

    @Test
    public void testgetCustomerValueBaseInfo() {
        customerValueService.getCustomerValueBaseInfo();
        System.err.println("执行完成，去数据库中观察数据");
    }

    @Autowired
    private CustomerRecordService recordService;

    @Autowired
    private IResvOrderService orderMapper;

    private List<ResvOrder> getOrder() {

        List<Integer> list = Arrays.asList(107,108,178,197,300,302,305,306,308,309,317,318,342,367,368,370,371,372,373,374,375,377,378,380,387,418,538,540,546,549,551,572,574,575,583,584,605,626,627,641,642,643,644,646,649,651,665,666,669,
                779,781,783,784,785,786,787,788,789,790,791,792,813,814,815,816,851,858,859,1098,1099,1100,1101,1131,1132,1151,1222,1224,1228,1229,1230,1240,1241,1242,1243,1244,1245,1249,1250,1251,1252,1255,1256,
                1257,1259,1260,1262,1264,1266,1273,1276,1305,1306,1350,1498,1499,1590,1598,1623,1625,1632,1633,1635,1657,1660,1662,1671,1678,1681,1752,1770,1775,1790,1812,1813,1815,1816,1818,1819,1820,1822,1823,
                1825,1826,1827,1828,1829,1830,1832,1833,1835,1836,1837,1838,1839,1840,1841,1842,1843,1844,1850,1851,1853,1854,1856,1857,1859,1860,1861,1863,1864,1865,1866,1867,1869,1870,1872,1879,1881,1882,1884,
                1885,1886,1887,1888,1889,1890,1891,1892,1893,1899,1900,1901,1902,1906,1907,1908,1909,1910,1911,1913,1914,1915,1916,1917,1918,1919,1920,1968,1969,1970,1971,1972,1973,1974,1975,1976,1977,1978,1979,
                1980,1981,1982,1983,1986,1993,1995,1996,2007,2009,2010,2011,2015,2022,2150,2168,3254,3550,3551,3552,3553,3558,3559,3560,3561,3600,3603,3604,3609,4130,4881,4919,5281,5282,5449,5450,5462,5806,5916,
                6249,6277,6290,6300,6304,6305,6334,6338,6394,6401,6403,6409,6935,7092,7214,7216,7222,7225,7355,7407,7411,7412,7413,7414,7653,7795,8162,8163,8488,8494,8496,8497,8499,9132,9258,9263,9660,9683,9779,
                9781,9946,10264,10265,10283,10285,10293,10295,10882,10883,10884,10885,10886,10887,11059,11179,11180,11233,11235,11236,11237,11239,11243,11251,11473,11844,11846,11848,11852,11853,11854,11856,11908,
                11962,12083,12088,12093,12100,12118,12152,12156,12157,12158,12159,12164,12295,13462,13480,14330,14331,14333,14334,14335,14467,14532,14533,14538,14539,14541,14546,14547,15008,15192,15232,15545,15752,
                15753,15754,15768,15772,15789,15995,16076,16077,16080,16081,16349,17432,17433,17483,17548,17549,17557,17558,17560,17640,17672,17889,17896,17897,17898,17922,17943,18821,18822,18823,18824,18827,18829,
                18830,18831,18832,18833,18834,18835,18837,18838,18935,18942,18945,18952,18965,18967,19003,19034,19336,19377,19380,19381,19456,19457,19459,19462,19463,19464,19804,19878,19879,19926,19929,19930,19988,
                20083,20084,20111,20117,20124,20159,20163,20174,20185,20569,20577,20586,20599,20609,20616,20624,20639,20897,20905,21108,21109,21110,21111,21112,21113,21114,21115,21116,21117,21118,21119,21120,21121,
                21122,21123,21124,21414,21571,21708,22018,23051,23052,23219,24335,24578,24579,24959,24960,25159,25474,26169,28882,28891,28996,29039,29041,29042,29116,29147,29175,29227,29320,29322,29323,29324,29333,
                29554,29566,29726,29941,31906,31909,31913,31914,31915,31916,31921,32418,32426,32431,32433,32434,32435,32439,32440,32441,32444,32445,32447,32448,32449,32769,32770,33109,33110,33129,33133,33137,33138,
                33156,33157,33176,33177,33184,33185,33206,33217,33218,33219,33228,33912,33931,34083,34084,34687,34691,34698,34699,34701,35098,36173,36719,36720,37338,37346,37347,37349,37351,37420,39374,39472,39742,
                42138,42715,42716,42718,42736,42737,42738,42739,42740,42876,43079,43155,43157,43158,43159,43162,44380,44381,44499,44694,44698,44700,44702,44703,44706,44713,44714,44802,44807,45145,45411,45624,46742,
                46750,46757,46758,46761,47585,47589,48910,48911,48912,48913,48914,48915,48916,48917,48918,48919,49238,50087,50092,50095,50096,50098,50099,50100,50101,50106,50107,50112,50113,50114,50167,50173,50180,
                50345,50413,50976,52780,52788,52789,52790,52791,52794,52795,52796,53376,53377,53385,53386,53387,53388,53389,53400,54185,54586,54594,54595,54596,54604,54607,54610,55362,55377,55378,55474,55475,55476,
                55477,55479,55481,55483,55526,55542,55575,55576,55577,56009,56044,56045,56049,56050,56051,56087,56136,56562,56565,56567,56569,56573,56588,56589,56969,57093,57097,57098,57106,57118,57131,57132,57133,
                57134,57138,57172,57578,57594,57680,57685,57689,57691,57694,57698,57715,57716,57717,57722,57723,58068,58069,58073,58074,58079,58084,58086,58087,58089,58106,58203,58213,58237,58303,58309,58316,58356,
                58429,58756,58760,58761,58762,58765,58798,58805,58821,58839,58900,58906,58909,58913,58917,58918,58927,58935,58936,58938,58949,58950,58951,59167,59190,59191,59230,59231,59313,59326,59381,59385,59386,
                59387,59389,59390,59391,59407,59427,59430,59432,59433,59791,59792,59874,59898,59904,59905,59909,59910,59914,60320,60446,60501,60502,60527,60533,60535,60537,60703,60734,60906,60908,61381,61388,61436,
                61437,61946,62816,62855,62872,62876,62891,62897,62904,62919,63080,63334,63336,63337,63338,63339,63349,63353,64109,64115,64309,64315,64317,64320,64361,64691,64960,65158,65463,65615,65617,65663,65664,
                65665,65963,65967,65974,66039,66046,66068,66080,66244,66267,66277,66701,66828,66829,66831,66832,66833,66834,66835,66836,66837,66864,66943,66974,66977,66980,66981,66982,66985,66986,66992,67177,67449,
                67574,67798,67801,67802,67803,67804,67805,67821,68187,68216,68218,68222,68229,68232,68233,68236,68240,68245,68246,68247,68248,68254,68256,68257,68258,68259,68264,68282,68506,68644,68656,68658,68661,
                68673,68676,68738,68741,68742,68747,68748,68749,68751,68752,68755,68756,68758,68759,68761,68762,68763,68764,68765,68766,68767,68771,68772,70164,70228,70229,70230,70231,70232,70248,70249,70250,70251,
                70262,70278,70336,71769,71872,71875,72313,72314,72315,72316,72318,72319,72320,72322,72323,72324,72325,72327,72332,72337,72341,72343,72344,72346,72351,72358,72415,72416,72417,72446,72627,72654,72690,
                72829,72836,72888,72889,73020,73530,73532,73533,73534,73550,73551,73555,73559,73589,73698,73714,73728,73743,73822,74093,74176,74405,74411,74659,75155,75585,75586,75594,75816,75824,76063,76072,76073,
                76074,76075,76083,76084,76116,76117,76343,76381,76451,76456,76463,76465,76473,76977,77047,77048,77049,77050,77053,77054);

        return orderMapper.selectBatchIds(list);
    }

    @Test
    public void testRecord() {
        Vip vip = new Vip();
        vip.setId(5698542);
        CustomerValueList valueList = new CustomerValueList();
        recordService.getCustomerRecord(vip, getOrder(), valueList);
    }

    @Autowired
    private RabbitTemplate rabbitTemplate;

    @Test
    public void testProducer() {
        for (int i = 0; i < 10; i++) {
            CustomerValueChangeFieldDTO dto = new CustomerValueChangeFieldDTO();
            dto.setVipId(5698542);
            dto.setType("PROFILE");
            dto.setValue(i + "-" + 1);
            rabbitTemplate.convertAndSend(QueueName.CUSTOMER_VALUE_DIRECT_EXCHANGE, QueueName.CUSTOMER_VALUE_TOUTINGKEY, dto);
        }


    }
}
